generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  tag           String?
  name          String
  surname       String
  email         String         @unique
  phone         String
  location      String?
  gender        String?
  biography     String?
  password      String
  salt          String?
  isLawApproved Boolean        @default(false)
  photoKey      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  roles         Role[]         @relation("UserRoles") // Bir kullanıcı birden fazla role sahip olabilir
  businesses    Business[]
  profile       Profile?
  favorites     Favorite[]
  refreshTokens RefreshToken[]

  businessWorkers BusinessWorker[] // bir kullanıcı birden fazla çalışan olabilir
  businessRatings BusinessRating[]
  businessReviews BusinessReview[]
  appointments Appointment[] @relation("UserAppointments")

}

enum UserRole {
  super_admin
  admin
  store_owner
  customer
}

model Role {
  id     String   @id @default(uuid())
  role   UserRole
  userId String
  user   User     @relation(fields: [userId], references: [id], name: "UserRoles")

  @@index([userId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Profile {
  id                String    @id @default(uuid())
  userId            String    @unique
  bio               String?
  birthDate         DateTime?
  avatarUrl         String?
  isProfileComplete Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  favorites Favorite[] @relation("ProfileFavorites")
  //appointments      Appointment[]  // Henüz Appointment modeli eklenmediyse şimdilik yoruma alabilirsin
}

model Business {
  id          String    @id @default(uuid())
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  name        String
  description String?
  location    String
  address     String?
  latitude    Float? // konum servisleri için
  longitude   Float?
  phone       String?
  email       String?
  website     String?
  photoKey    String? // kapak/ana görsel
  isApproved  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  // amenities satırı ekleyebilirsin, koordinat yapısı location:  latitude, longitude gibi olabilir ya da böyle
  // de kalabilir onu sor.

  businessTypeId String?
  businessType   BusinessType? @relation(fields: [businessTypeId], references: [id])
  services        BusinessService[] 
  workers BusinessWorker[]
  ratings BusinessRating[]
  reviews BusinessReview[]
  calendar BusinessCalendar[]
  contacts BusinessContact[]
  portfolios BusinessPortfolio[]
  appointments Appointment[]


}

model BusinessType {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişki: Bir tür, birçok mağazada kullanılabilir
  businesses Business[]
}

model BusinessService {
  id          String   @id @default(uuid())
  businessId  String
  name        String
  price       Float
  duration    Int       // dakika cinsinden hizmet süresi
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  business Business @relation(fields: [businessId], references: [id])
  appointmentServices AppointmentService[] 

}

model WorkerType {
  id          String             @id @default(uuid())
  name        String             @unique
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  businessWorkers BusinessWorker[]

}

model BusinessWorker {
  id           String      @id @default(uuid())
  businessId   String
  workerTypeId String
  userId       String?     // Opsiyonel: sistemde kayıtlı kullanıcı ile eşleştirilebilir
  name         String
  photoKey     String?
  bio          String?
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  business     Business    @relation(fields: [businessId], references: [id])
  workerType   WorkerType  @relation(fields: [workerTypeId], references: [id])
  user         User?       @relation(fields: [userId], references: [id])
  appointments Appointment[] @relation("WorkerAppointments")
}

model BusinessRating {
  id          String   @id @default(uuid())
  userId      String
  businessId  String
  rating      Int      // 1-5 arasında olmalı
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  business    Business @relation(fields: [businessId], references: [id])

  @@unique([userId, businessId])
}

model BusinessReview {
  id            String    @id @default(uuid())
  appointmentId String    @unique
  userId        String
  businessId    String
  content       String
  photoKey      String?   // opsiyonel görsel (fotoğraf, ekran görüntüsü vs)
  createdAt     DateTime  @default(now())

  // yorumun girildiği tarihi ekleyebilirsin

  user        User         @relation(fields: [userId], references: [id])
  business    Business     @relation(fields: [businessId], references: [id])
appointment Appointment @relation("AppointmentReview", fields: [appointmentId], references: [id])

  @@map("reviews")
}

model BusinessContact {
  id           String   @id @default(uuid())
  businessId   String
  contactType  String   // örnek: phone, email, whatsapp, instagram
  contactValue String   // örnek: 0555..., support@..., @kuafor.ahmet
  createdAt    DateTime @default(now())

  business     Business @relation(fields: [businessId], references: [id])
}

model BusinessCalendar {
  id          String   @id @default(uuid())
  businessId  String
  dayOfWeek   Int      // 0: Pazar, 1: Pazartesi, ..., 6: Cumartesi
  isOpen      Boolean  @default(false)
  note        String?  // özel not: "Yalnızca randevu ile", "Bayram dolayısıyla kapalı"
  createdAt   DateTime @default(now())

  business    Business @relation(fields: [businessId], references: [id])
  shifts      BusinessShift[]
}

model BusinessShift {
  id           String   @id @default(uuid())
  calendarId   String
  startTime    String   // örnek: "09:00"
  endTime      String   // örnek: "13:00"
  createdAt    DateTime @default(now())

  calendar     BusinessCalendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
} 

// BusinessCalender+BusinessShift açıklaması: Bu ikisi beraber çalışıyor. Calendar, mağazanın hangi günler çalıştığını ve opsiyonel 
// olarak özel günlerini belirtir. Shift ise o gün içindeki çalışma saat aralıklarını belirler, 09:00-13:00 ve 14:00-18:00 gibi.

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Appointment {
  id          String    @id @default(uuid())
  customerId  String
  businessId  String
  workerId    String?
  date        DateTime
  status      AppointmentStatus @default(PENDING) // Randevu durumu
  note        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   String?

  customer   User             @relation("UserAppointments", fields: [customerId], references: [id])
  business   Business         @relation(fields: [businessId], references: [id])
  worker     BusinessWorker?  @relation("WorkerAppointments", fields: [workerId], references: [id])
  review     BusinessReview?  @relation("AppointmentReview")
  services   AppointmentService[]

  @@index([customerId])
  @@index([businessId])
}


model AppointmentService {
  id            String   @id @default(uuid())
  appointmentId String
  serviceId     String

  appointment   Appointment      @relation(fields: [appointmentId], references: [id])
  service       BusinessService  @relation(fields: [serviceId], references: [id])

  @@unique([appointmentId, serviceId])
}

enum MediaType {
  image
  video
}

model BusinessPortfolio {
  id         String     @id @default(uuid())
  businessId String
  mediaUrl   String
  mediaType  MediaType
  createdAt  DateTime   @default(now())

  business   Business   @relation(fields: [businessId], references: [id])
}

// Enum değeri string olarak ("image veya "video") gönderildiğinde Prisma Client otomatik eşleştirir. Ama typescript'te MediaType
// import edip doğrudan mediaType: MediaType.image gibi de gönderilebilir.

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  businessId String
  profileId  String? // opsiyonel olabilir
  createdAt  DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  profile Profile? @relation(fields: [profileId], references: [id], name: "ProfileFavorites")

  // business   Business @relation(fields: [businessId], references: [businessId])

  @@unique([userId, businessId])
}
